{"version":3,"sources":["components/Search/Search.js","App.js","serviceWorker.js","index.js"],"names":["Search","state","searchText","mealSearchApiUrl","meals","handleMealInputChange","event","setState","target","value","ApiMealSearch","console","log","axios","get","then","res","data","catch","err","handleMealSearch","individualMealStyle","index","padding","border","backgroundColor","borderRadius","margin","boxShadow","transform","this","style","searchDiv","appHeaderStyle","name","type","placeholder","mealInputStyle","onChange","onClick","className","map","meal","key","src","strMealThumb","alt","mealImgStyle","mealHeaderStyle","strMeal","Component","color","textAlign","width","height","background","fontSize","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sTAKMA,E,2MACFC,MAAQ,CACJC,WAAY,GACZC,iBAAkB,qDAClBC,MAAO,I,EAIXC,sBAAwB,SAACC,GACrB,EAAKC,SAAS,CAAEL,WAAYI,EAAME,OAAOC,S,EAK7CC,cAAgB,SAACR,GACbS,QAAQC,IAAI,oCACZC,IAAMC,IAAN,UAAa,EAAKb,MAAME,iBAAxB,cAA8CD,IACzCa,MAAK,SAAAC,GAAG,OAAI,EAAKT,SAAS,CAAEH,MAAOY,EAAIC,KAAKb,WAC5Cc,OAAM,SAAAC,GAAG,OAAIR,QAAQC,IAAIO,O,EAclCC,iBAAmB,WACf,EAAKV,cAAc,EAAKT,MAAMC,a,EAGlCmB,oBAAsB,SAACC,GAEnB,OADAX,QAAQC,IAAI,YAAaU,GAClB,CACHC,QAAS,OACTC,OAAQ,oBACRC,gBAAiB,QACjBC,aAAc,OACdC,OAAQ,YAGRC,UAAW,oBACXC,UAAWP,EAAO,IAAM,EAAI,eAAiB,mB,wEAK3C,IAAD,OAEL,OADAX,QAAQC,IAAIkB,KAAK7B,MAAMG,OAEnB,yBAAK2B,MAAOC,GACR,wBAAID,MAAOE,GAAX,qBACA,2BACIC,KAAK,aACLC,KAAK,OACLC,YAAY,uCACZL,MAAOM,EACP5B,MAAOqB,KAAK7B,MAAMC,WAClBoC,SAAU,SAAAhC,GAAK,OAAI,EAAKD,sBAAsBC,MAElD,4BAAQiC,QAAST,KAAKV,iBAAkBoB,UAAU,OAAlD,YAEA,6BAECV,KAAK7B,MAAMG,MACR,yBAAKoC,UAAU,uBACVV,KAAK7B,MAAMG,MAAMqC,KAAI,SAACC,EAAMpB,GAAP,OAElB,yBAAKqB,IAAKrB,EAAOS,MAAO,EAAKV,oBAAoBC,IAC7C,yBAAKsB,IAAMF,EAAKG,aAAeC,IAAI,iBAAiBf,MAAOgB,IAC3D,wBAAIhB,MAAOiB,GAAmBN,EAAKO,QAAnC,UAKZ,wBAAIlB,MAAOiB,GAAX,6BAAsD,6BAAtD,oC,GAhFCE,aAwFfjB,EAAiB,CACnBkB,MAAO,UACPxB,OAAO,UACPyB,UAAW,UAGTJ,EAAkB,CACpBG,MAAO,UACPxB,OAAQ,WACRyB,UAAW,UAGTpB,EAAY,CACdoB,UAAW,SACXC,MAAO,OACPC,OAAQ,QAGRC,WAAY,WAGVlB,EAAiB,CACnBgB,MAAO,MACPD,UAAW,SACXzB,OAAQ,YACRJ,QAAS,YACTG,aAAc,MACdF,OAAQ,oBACRI,UAAW,oBACX4B,SAAU,QAIRT,EAAe,CACjBM,MAAO,OACPC,OAAQ,QACR5B,aAAc,QAKH1B,ICvHAyD,MAVf,WACE,OACE,yBAAKjB,UAAU,OACb,yBAAKA,UAAU,aACX,kBAAC,EAAD,SCGUkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtD,MAAK,SAAAuD,GACjCA,EAAaC,kB","file":"static/js/main.1d0ed17d.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport '../../App.css';\r\n\r\nclass Search extends Component {\r\n    state = {\r\n        searchText: '',\r\n        mealSearchApiUrl: 'https://www.themealdb.com/api/json/v1/1/search.php',\r\n        meals: []\r\n    };\r\n\r\n    // handle state change\r\n    handleMealInputChange = (event) => {\r\n        this.setState({ searchText: event.target.value })\r\n    };\r\n\r\n    //api caller\r\n    //handle meal search\r\n    ApiMealSearch = (searchText) => {\r\n        console.log(\"API meal Search call initialized\");\r\n        axios.get(`${this.state.mealSearchApiUrl}?s=${searchText}`)\r\n            .then(res => this.setState({ meals: res.data.meals })) //console.log(\"result data: \" + res.data)\r\n            .catch(err => console.log(err))\r\n\r\n        // Alternative\r\n        // fetch(`${this.state.mealSearchApiUrl}?s=${searchText}`)\r\n        //     .then(response => {\r\n        //         return response.json();\r\n        //     })\r\n        //     .then(jsonData => {\r\n        //         // console.log(jsonData.meals);\r\n        //         this.setState({ meals: jsonData.meals });\r\n        //     });\r\n    };\r\n\r\n    //handle meal search\r\n    handleMealSearch = () => {\r\n        this.ApiMealSearch(this.state.searchText);\r\n    };\r\n\r\n    individualMealStyle = (index) => {\r\n        console.log(\"index: %o\", index);\r\n        return {\r\n            padding: \"10px\",\r\n            border: \"2px solid #37003c\",\r\n            backgroundColor: \"white\",\r\n            borderRadius: \"10px\",\r\n            margin: \"75px 15px\",\r\n            // -ms-transform: \"rotate(7deg)\", /* IE 9 */\r\n            // -webkit-transform: \"rotate(7deg)\", /* Safari */\r\n            boxShadow: \"10px 10px #37003c\",\r\n            transform: index %2 === 0 ? \"rotate(7deg)\" : \"rotate(-13deg)\"\r\n        }\r\n\r\n    };\r\n\r\n    render() {\r\n        console.log(this.state.meals);\r\n        return (\r\n            <div style={searchDiv}>\r\n                <h1 style={appHeaderStyle}>React Foodie App </h1>\r\n                <input\r\n                    name=\"searchText\"\r\n                    type=\"text\"\r\n                    placeholder=\"Enter Meal of Choice e.g. chicken...\"\r\n                    style={mealInputStyle}\r\n                    value={this.state.searchText}\r\n                    onChange={event => this.handleMealInputChange(event)}\r\n                />\r\n                <button onClick={this.handleMealSearch} className=\"btn\" > Search </button>\r\n\r\n                <br/>\r\n\r\n                {this.state.meals ? (\r\n                    <div className=\"mealsContainerStyle\">\r\n                        {this.state.meals.map((meal, index) => (\r\n\r\n                            <div key={index} style={this.individualMealStyle(index)}>\r\n                                <img src={ meal.strMealThumb } alt=\"meal-thumbnail\" style={mealImgStyle} />\r\n                                <h1 style={mealHeaderStyle}>{ meal.strMeal } </h1>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                ) : (\r\n                    <h1 style={mealHeaderStyle}> Cannot find said images. <br/> Try searching for another </h1>\r\n                )}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst appHeaderStyle = {\r\n    color: \"#37003c\",\r\n    margin:\"100px 0\",\r\n    textAlign: \"center\"\r\n};\r\n\r\nconst mealHeaderStyle = {\r\n    color: \"#37003c\",\r\n    margin: \"0 0 30px\",\r\n    textAlign: \"center\"\r\n};\r\n\r\nconst searchDiv = {\r\n    textAlign: \"center\",\r\n    width: \"100%\",\r\n    height: \"100vh\",\r\n    // padding: \"20px\",\r\n    // border: \"0.2px solid #37003C\",\r\n    background: \"#f4f4f4\"\r\n};\r\n\r\nconst mealInputStyle = {\r\n    width: \"80%\",\r\n    textAlign: \"center\",\r\n    margin: \"25px auto\",\r\n    padding: \"18px 10px\",\r\n    borderRadius: \"5px\",\r\n    border: \"1px solid #37003c\",\r\n    boxShadow: \"1px 0.5px #37003c\",\r\n    fontSize: \"18px\"\r\n};\r\n\r\n\r\nconst mealImgStyle = {\r\n    width: \"100%\",\r\n    height: \"350px\",\r\n    borderRadius: \"10px\",\r\n};\r\n\r\n// Search.propTypes = {};\r\n\r\nexport default Search;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Search from \"./components/Search/Search\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n          <Search />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}